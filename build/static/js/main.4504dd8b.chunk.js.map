{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","services/login.js","components/LoginForm.js","components/Togglable.js","components/NoteForm.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","NoteForm","createNote","newNote","setNewNote","event","preventDefault","Math","random","target","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","notesToShow","filter","addNote","noteObject","noteFormRef","current","returnedNote","concat","handleLogin","loginService","setItem","stringify","setTimeout","useRef","name","map","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4504dd8b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Tim Yehan Lee</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = async newObject => {\r\n    const config = {\r\n        headers: { Authorization: token },\r\n    }\r\n    const response = await axios.post(baseUrl, newObject, config)\r\n    return response.data\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, setToken }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default { login }\n","import React from 'react'\n\nconst LoginForm = ({\n    handleSubmit,\n    handleUsernameChange,\n    handlePasswordChange,\n    username,\n    password\n}) => {\n    return (\n        <div>\n            <h2>Login</h2>\n\n            <form onSubmit={handleSubmit}>\n                <div>\n                    username\n                    <input\n                        value={username}\n                        onChange={handleUsernameChange}\n                    />\n                </div>\n                <div>\n                    password\n                    <input\n                        type='password'\n                        value={password}\n                        onChange={handlePasswordChange}\n                    />\n                </div>\n                    <button type='submit'>login</button>\n            </form>\n        </div>\n    )\n}\n\nexport default LoginForm","import React, { useState, useImperativeHandle } from 'react'\n\nconst Togglable = React.forwardRef((props, ref) => {        // forwardRef allows forwarding a ref to a child component\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    useImperativeHandle(ref, () => {        // makes toggleVisibility available outside of component\n        return {\n            toggleVisibility\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n            </div>\n            <div style={showWhenVisible}>\n                {props.children}\n                <button onClick={toggleVisibility}>cancel</button>\n            </div>\n        </div>\n    )\n})\n\nexport default Togglable","import React, {useState} from 'react'\n\nconst NoteForm = ({ createNote }) => {\n    const [newNote, setNewNote] = useState('')\n\n    const handleChange = (event) => {\n        setNewNote(event.target.value)\n    }\n    /* the HTML input element needs an onChange handler to allow the user to\n    change the element. Only setting value=newNote state causes the App component\n    to take control of the element, preventing input. */\n\n    const addNote = (event) => {\n        event.preventDefault()\n        createNote({\n            content:newNote,\n            important: Math.random() > 0.5,\n        })\n\n        setNewNote('')\n    }\n\n    return (\n        <div>\n            <h2>Create a new note</h2>\n\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleChange}\n                />\n                <button type='submit'>save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default NoteForm","import React, { useState, useEffect, useRef } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nimport noteService from './services/notes'\nimport loginService from './services/login'\nimport LoginForm from './components/LoginForm'\nimport Togglable from './components/Togglable'\nimport NoteForm from './components/NoteForm'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  useEffect(() => {   // on page load, if user is logged in, store login where needed\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n  /* a ternary operator that changes notesToShow depending on whether showAll is T/F.\n  Using notesToShow allows for conditional filtering of displayed note elements. */\n\n  const addNote = (noteObject) => {\n    noteFormRef.current.toggleVisibility()    // toggle noteForm's visibility func\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        /* the newnote returned by backend server is added to the list of notes\n        in the application state to trigger a browser re-render */\n        setNotes(notes.concat(returnedNote))\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important}\n    /* Create a new note that is a copy of the old note except for the important\n    property. We create a new note instead of mutating the note directly as that\n    would be mutating state directly */\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        //replace Notes with a new array that is the same except for the changed note\n      })\n      .catch(error => {\n        setErrorMessage(`the note '${note.content}' was already deleted from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    \n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      // save token to browser local storage\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)      // sets the user token for when they try to create notes\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => (\n    <Togglable buttonLabel='login'>\n      <LoginForm\n        username={username}\n        password={password}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleSubmit={handleLogin}\n      />\n    </Togglable>\n  )\n\n  const noteFormRef = useRef()    // reference to this component, hook ensures ref keeps through re-renders\n\n  const noteForm = () => (\n    <Togglable buttonLabel='new note' ref={noteFormRef}>\n      <NoteForm createNote={addNote}/>\n    </Togglable>\n  )\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      {user === null ?\n        loginForm() :\n        // if user is logged in, their name is shown\n        <div>\n          <p>{user.name} logged-in</p>\n          {noteForm()}\n        </div>\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n          //create a Note element for every note in notesToShow  \n        )}\n      </ul>\n\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}